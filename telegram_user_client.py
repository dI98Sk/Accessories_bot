"""
Telegram User Client –¥–ª—è —á—Ç–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ –æ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Telethon –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
"""
import os
import logging
import asyncio
from pathlib import Path
from typing import Optional, Callable, Awaitable
from datetime import datetime, timedelta, timezone

from telethon import TelegramClient, events
from telethon.tl.types import Message, DocumentAttributeFilename

from config import TelegramUserConfig, DataSourcesConfig, AppConfig
from logger import get_logger

logger = get_logger(__name__)


class TelegramUserReader:
    """
    –ö–ª–∏–µ–Ω—Ç –¥–ª—è —á—Ç–µ–Ω–∏—è Telegram –∫–∞–Ω–∞–ª–æ–≤ –æ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Telethon –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–∞–∫ user (–Ω–µ –±–æ—Ç).
    """
    
    def __init__(
        self,
        user_config: TelegramUserConfig,
        data_sources_config: DataSourcesConfig,
        app_config: AppConfig
    ):
        """
        Args:
            user_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram user
            data_sources_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö
            app_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        """
        self.user_config = user_config
        self.data_sources_config = data_sources_config
        self.app_config = app_config
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        self.client = TelegramClient(
            user_config.session_name,
            user_config.api_id,
            user_config.api_hash
        )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
        self.file_handler: Optional[Callable[[str, str], Awaitable[None]]] = None
        
        # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–∞—è –¥–∞—Ç–∞ (—Å timezone –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å Telegram messages)
        self.last_check_time = datetime.now(timezone.utc) - timedelta(days=1)
        
        logger.info("TelegramUserReader –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é"""
        logger.info("–ó–∞–ø—É—Å–∫ Telegram User Client...")
        
        await self.client.start(phone=self.user_config.phone)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        if await self.client.is_user_authorized():
            me = await self.client.get_me()
            logger.info(f"‚úì –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {me.first_name} (@{me.username})")
        else:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
            raise RuntimeError("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        
        logger.info("‚úì Telegram User Client –∑–∞–ø—É—â–µ–Ω")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç"""
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram User Client...")
        await self.client.disconnect()
        logger.info("‚úì Telegram User Client –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def set_file_handler(self, handler: Callable[[str, str], Awaitable[None]]):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤.
        
        Args:
            handler: Async —Ñ—É–Ω–∫—Ü–∏—è, –ø—Ä–∏–Ω–∏–º–∞—é—â–∞—è (file_path, file_name)
        """
        self.file_handler = handler
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∞–π–ª–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def check_new_messages(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ"""
        try:
            channel_id = self.data_sources_config.xtreme_case_channel_id
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª
            try:
                if channel_id.startswith('@'):
                    channel = await self.client.get_entity(channel_id)
                else:
                    channel = await self.client.get_entity(int(channel_id))
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª {channel_id}: {e}")
                return
            
            logger.info(f"üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ: {channel_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            messages = await self.client.get_messages(
                channel,
                limit=20  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π
            )
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
            
            new_files_count = 0
            checked_count = 0
            
            for message in messages:
                checked_count += 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–≤–æ–µ
                if message.date <= self.last_check_time:
                    logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message.id} —Å—Ç–∞—Ä–æ–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue
                
                logger.info(f"üÜï –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ID: {message.id}, –¥–∞—Ç–∞: {message.date}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                if message.document:
                    file_name = self._get_document_name(message)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ Excel —Ñ–∞–π–ª
                    if file_name and file_name.lower().endswith(('.xlsx', '.xls')):
                        logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª: {file_name}")
                        
                        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                        file_path = await self._download_file(message, file_name)
                        
                        if file_path and self.file_handler:
                            # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                            try:
                                await self.file_handler(file_path, file_name)
                                new_files_count += 1
                                logger.info(f"‚úì –§–∞–π–ª {file_name} –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {file_name}: {e}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Å timezone)
            self.last_check_time = datetime.now(timezone.utc)
            
            if new_files_count > 0:
                logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤: {new_files_count}")
            else:
                logger.info(f"‚ÑπÔ∏è  –ù–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ {checked_count} —Å–æ–æ–±—â–µ–Ω–∏–π)")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}", exc_info=True)
    
    def _get_document_name(self, message: Message) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not message.document:
            return None
        
        # –ò—â–µ–º –∞—Ç—Ä–∏–±—É—Ç —Å –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞
        for attr in message.document.attributes:
            if isinstance(attr, DocumentAttributeFilename):
                return attr.file_name
        
        # –ï—Å–ª–∏ –∏–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º ID
        return f"document_{message.document.id}.xlsx"
    
    async def _download_file(self, message: Message, file_name: str) -> Optional[str]:
        """
        –°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è.
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º
            file_name: –ò–º—è —Ñ–∞–π–ª–∞
        
        Returns:
            –ü—É—Ç—å –∫ —Å–∫–∞—á–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            temp_dir = Path(self.app_config.temp_dir)
            temp_dir.mkdir(parents=True, exist_ok=True)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            safe_file_name = f"{timestamp}_{file_name}"
            file_path = temp_dir / safe_file_name
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            logger.info(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: {file_name}")
            await self.client.download_media(message.document, file=str(file_path))
            
            logger.info(f"‚úì –§–∞–π–ª —Å–∫–∞—á–∞–Ω: {file_path}")
            return str(file_path)
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_name}: {e}")
            return None
    
    async def process_recent_files(self, limit: int = 10):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–∞–π–ª—ã –∏–∑ –∫–∞–Ω–∞–ª–∞ (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –¥–∞—Ç—ã).
        –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏.
        
        Args:
            limit: –°–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
        """
        logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö {limit} —Ñ–∞–π–ª–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞...")
        
        try:
            channel_id = self.data_sources_config.xtreme_case_channel_id
            
            if channel_id.startswith('@'):
                channel = await self.client.get_entity(channel_id)
            else:
                channel = await self.client.get_entity(int(channel_id))
            
            messages = await self.client.get_messages(channel, limit=limit)
            processed_count = 0
            
            for message in messages:
                if message.document:
                    file_name = self._get_document_name(message)
                    
                    if file_name and file_name.lower().endswith(('.xlsx', '.xls')):
                        logger.info(f"üìÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {file_name}")
                        
                        file_path = await self._download_file(message, file_name)
                        
                        if file_path and self.file_handler:
                            try:
                                await self.file_handler(file_path, file_name)
                                processed_count += 1
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {file_name}: {e}")
            
            logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏: {processed_count}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            self.last_check_time = datetime.now(timezone.utc)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤: {e}", exc_info=True)
    
    async def start_monitoring(self):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞ –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º —Ü–∏–∫–ª–µ.
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º.
        """
        logger.info("–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–∞...")
        logger.info(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {self.app_config.telegram_check_interval} —Å–µ–∫—É–Ω–¥")
        logger.info(f"–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {self.last_check_time}")
        
        while True:
            try:
                await self.check_new_messages()
                await asyncio.sleep(self.app_config.telegram_check_interval)
            except KeyboardInterrupt:
                logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}", exc_info=True)
                await asyncio.sleep(10)  # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º


async def test_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram"""
    from config import get_telegram_user_config, get_data_sources_config, get_app_config
    
    user_config = get_telegram_user_config()
    data_sources_config = get_data_sources_config()
    app_config = get_app_config()
    
    reader = TelegramUserReader(user_config, data_sources_config, app_config)
    
    await reader.start()
    
    # –¢–µ—Å—Ç: –ø–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    logger.info("–¢–µ—Å—Ç: –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")
    await reader.check_new_messages()
    
    await reader.stop()


if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    from logger import setup_logging
    setup_logging(get_app_config())
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    asyncio.run(test_connection())

