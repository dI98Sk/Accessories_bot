"""
Unified Bot - –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
"""
import os
import asyncio
import logging
from pathlib import Path
from typing import Optional
from datetime import datetime

from telegram import Bot
from telegram.error import TelegramError

from config import (
    get_telegram_user_config,
    get_bot_config,
    get_google_sheets_config,
    get_data_sources_config,
    get_app_config,
    ProcessorConfig
)
from telegram_user_client import TelegramUserReader
from google_sheets_reader import GoogleSheetsReader
from processors import ProcessorFactory
from logger import setup_logging, get_logger

logger = get_logger(__name__)


class UnifiedPriceBot:
    """
    –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:
    - XtremeCase: —á–∏—Ç–∞–µ—Ç—Å—è –∏–∑ Telegram –∫–∞–Ω–∞–ª–∞ (user client)
    - CifrovoyRay: —á–∏—Ç–∞–µ—Ç—Å—è –∏–∑ Google Sheets
    
    –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ —Ü–µ–ª–µ–≤–æ–π Telegram –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ –±–æ—Ç–∞.
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–æ—Ç–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""
        logger.info("=" * 80)
        logger.info("UNIFIED PRICE BOT - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è")
        logger.info("=" * 80)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        try:
            self.data_sources_config = get_data_sources_config()
            self.bot_config = get_bot_config()
            self.app_config = get_app_config()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –≤–∫–ª—é—á–µ–Ω—ã
            self.telegram_user_config = None
            self.google_sheets_config = None
            
            if self.data_sources_config.enable_xtreme_case:
                self.telegram_user_config = get_telegram_user_config()
            
            if self.data_sources_config.enable_cifrovoy_ray:
                self.google_sheets_config = get_google_sheets_config(required=True)
        except ValueError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            raise
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.telegram_reader: Optional[TelegramUserReader] = None
        self.sheets_reader: Optional[GoogleSheetsReader] = None
        self.telegram_bot: Optional[Bot] = None
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "telegram_files_processed": 0,
            "sheets_files_processed": 0,
            "errors": 0,
            "start_time": None
        }
        
        logger.info("‚úì –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±–æ—Ç–∞"""
        logger.info("\n" + "=" * 80)
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        logger.info("=" * 80)
        
        component_num = 1
        total_components = 1  # Telegram Bot –≤—Å–µ–≥–¥–∞ –Ω—É–∂–µ–Ω
        if self.data_sources_config.enable_xtreme_case:
            total_components += 1
        if self.data_sources_config.enable_cifrovoy_ray:
            total_components += 1
        
        # 1. Telegram User Client (–¥–ª—è —á—Ç–µ–Ω–∏—è XtremeCase –∫–∞–Ω–∞–ª–∞) - –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
        if self.data_sources_config.enable_xtreme_case:
            logger.info(f"\n[{component_num}/{total_components}] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram User Client...")
            self.telegram_reader = TelegramUserReader(
                self.telegram_user_config,
                self.data_sources_config,
                self.app_config
            )
            self.telegram_reader.set_file_handler(self._handle_xtreme_case_file)
            await self.telegram_reader.start()
            logger.info("‚úì Telegram User Client –≥–æ—Ç–æ–≤")
            component_num += 1
        else:
            logger.info("\n‚è≠Ô∏è  XtremeCase –æ—Ç–∫–ª—é—á–µ–Ω (ENABLE_XTREME_CASE=false)")
            self.telegram_reader = None
        
        # 2. Google Sheets Reader (–¥–ª—è —á—Ç–µ–Ω–∏—è CifrovoyRay) - –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
        if self.data_sources_config.enable_cifrovoy_ray:
            logger.info(f"\n[{component_num}/{total_components}] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets Reader...")
            self.sheets_reader = GoogleSheetsReader(
                self.google_sheets_config,
                self.app_config
            )
            self.sheets_reader.connect()
            self.sheets_reader.set_file_handler(self._handle_cifrovoy_ray_file)
            logger.info("‚úì Google Sheets Reader –≥–æ—Ç–æ–≤")
            component_num += 1
        else:
            logger.info("\n‚è≠Ô∏è  CifrovoyRay –æ—Ç–∫–ª—é—á–µ–Ω (ENABLE_CIFROVOY_RAY=false)")
            self.sheets_reader = None
        
        # 3. Telegram Bot (–¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª) - –≤—Å–µ–≥–¥–∞ –Ω—É–∂–µ–Ω
        logger.info(f"\n[{component_num}/{total_components}] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Bot...")
        self.telegram_bot = Bot(token=self.bot_config.bot_token)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ—Ç–∞
        bot_info = await self.telegram_bot.get_me()
        logger.info(f"‚úì Bot –≥–æ—Ç–æ–≤: @{bot_info.username}")
        
        logger.info("\n" + "=" * 80)
        logger.info("‚úì –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        logger.info("=" * 80 + "\n")
        
        self.stats["start_time"] = datetime.now()
    
    async def _handle_xtreme_case_file(self, file_path: str, file_name: str):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª XtremeCase –∏–∑ Telegram –∫–∞–Ω–∞–ª–∞.
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Å–∫–∞—á–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
            file_name: –ò–º—è —Ñ–∞–π–ª–∞
        """
        try:
            logger.info("=" * 80)
            logger.info(f"üîµ –û–ë–†–ê–ë–û–¢–ö–ê XTREME CASE: {file_name}")
            logger.info("=" * 80)
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è XtremeCase
            config = ProcessorConfig.xtreme_case()
            processor = ProcessorFactory.create_processor("xtreme_case", config)
            
            logger.info(f"–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: {processor.__class__.__name__}")
            logger.info(f"–ù–∞—Ü–µ–Ω–∫–∞: +{processor.markup_value} —Ä—É–±.")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
            processed_file = processor.process_file(file_path)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª
            await self._send_to_target_channel(processed_file, file_name, "XtremeCase", processor.markup_value)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.stats["telegram_files_processed"] += 1
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            self._cleanup_files(file_path, processed_file)
            
            logger.info(f"‚úì {file_name} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            logger.info("=" * 80 + "\n")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ XtremeCase —Ñ–∞–π–ª–∞ {file_name}: {e}", exc_info=True)
            self.stats["errors"] += 1
    
    async def _handle_cifrovoy_ray_file(self, file_path: str, file_name: str):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª CifrovoyRay –∏–∑ Google Sheets.
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É Excel —Ñ–∞–π–ª—É
            file_name: –ò–º—è —Ñ–∞–π–ª–∞
        """
        try:
            logger.info("=" * 80)
            logger.info(f"üü¢ –û–ë–†–ê–ë–û–¢–ö–ê CIFROVOY RAY: {file_name}")
            logger.info("=" * 80)
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è CifrovoyRay (—Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –ª–∏—Å—Ç–æ–≤)
            config = ProcessorConfig.cifrovoy_ray()
            processor = ProcessorFactory.create_processor("cifrovoy_ray", config)
            
            logger.info(f"–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: {processor.__class__.__name__}")
            logger.info(f"–ù–∞—Ü–µ–Ω–∫–∞: +{processor.markup_value} —Ä—É–±.")
            logger.info("–†–µ–∂–∏–º: —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ª–∏—Å—Ç–æ–≤")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª (–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å–æ–∑–¥–∞—Å—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ª–∏—Å—Ç–∞)
            processor.process_file(file_path)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
            input_dir = os.path.dirname(file_path)
            output_dir = os.path.join(input_dir, processor.output_subdir)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            if os.path.exists(output_dir):
                for processed_file_name in os.listdir(output_dir):
                    if processed_file_name.endswith('.xlsx'):
                        processed_file_path = os.path.join(output_dir, processed_file_name)
                        await self._send_to_target_channel(
                            processed_file_path,
                            processed_file_name,
                            "CifrovoyRay",
                            processor.markup_value
                        )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.stats["sheets_files_processed"] += 1
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            self._cleanup_files(file_path, output_dir)
            
            logger.info(f"‚úì {file_name} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            logger.info("=" * 80 + "\n")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ CifrovoyRay —Ñ–∞–π–ª–∞ {file_name}: {e}", exc_info=True)
            self.stats["errors"] += 1
    
    async def _send_to_target_channel(self, file_path: str, original_name: str, source_type: str, markup: float):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –≤ —Ü–µ–ª–µ–≤–æ–π Telegram –∫–∞–Ω–∞–ª.
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            original_name: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            source_type: –¢–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (XtremeCase/CifrovoyRay)
            markup: –ü—Ä–∏–º–µ–Ω–µ–Ω–Ω–∞—è –Ω–∞—Ü–µ–Ω–∫–∞
        """
        try:
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª: {os.path.basename(file_path)}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º caption
            current_time = datetime.now().strftime('%d.%m.%Y %H:%M')
            caption = (
                f"–ü—Ä–∞–π—Å –∞–∫—Ç—É–∞–ª–µ–Ω –Ω–∞ {current_time}\n"
                f"{original_name}"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            with open(file_path, 'rb') as f:
                await self.telegram_bot.send_document(
                    chat_id=self.bot_config.target_channel_id,
                    document=f,
                    filename=os.path.basename(file_path),
                    caption=caption
                )
            
            logger.info(f"‚úì –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª")
        
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")
            raise
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
            raise
    
    def _cleanup_files(self, *paths):
        """–£–¥–∞–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        for path in paths:
            if not path:
                continue
            
            try:
                path_obj = Path(path)
                if path_obj.is_file():
                    path_obj.unlink()
                    logger.debug(f"–£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {path}")
                elif path_obj.is_dir():
                    import shutil
                    shutil.rmtree(path)
                    logger.debug(f"–£–¥–∞–ª–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {path}")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {path}: {e}")
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        logger.info("\n" + "üöÄ" * 40)
        logger.info("UNIFIED PRICE BOT - –ó–ê–ü–£–°–ö")
        logger.info("üöÄ" * 40 + "\n")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        await self.initialize()
        
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        logger.info("üìä –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:")
        logger.info(f"  –¶–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª: {self.bot_config.target_channel_id}")
        
        if self.data_sources_config.enable_xtreme_case:
            logger.info(f"  ‚úÖ XtremeCase: {self.data_sources_config.xtreme_case_channel_id}")
            logger.info(f"     –ò–Ω—Ç–µ—Ä–≤–∞–ª: {self.app_config.telegram_check_interval} —Å–µ–∫")
        else:
            logger.info(f"  ‚è≠Ô∏è  XtremeCase: –æ—Ç–∫–ª—é—á–µ–Ω")
        
        if self.data_sources_config.enable_cifrovoy_ray:
            logger.info(f"  ‚úÖ CifrovoyRay: {self.google_sheets_config.spreadsheet_id}")
            logger.info(f"     –ò–Ω—Ç–µ—Ä–≤–∞–ª: {self.app_config.sheets_check_interval} —Å–µ–∫")
        else:
            logger.info(f"  ‚è≠Ô∏è  CifrovoyRay: –æ—Ç–∫–ª—é—á–µ–Ω")
        
        logger.info("")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        process_recent = os.getenv("PROCESS_RECENT_ON_START", "false").lower() == "true"
        if process_recent and self.telegram_reader:
            recent_limit = int(os.getenv("PROCESS_RECENT_LIMIT", "10"))
            logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö {recent_limit} —Ñ–∞–π–ª–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞...")
            try:
                await self.telegram_reader.process_recent_files(limit=recent_limit)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤: {e}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...\n")
        
        tasks = []
        if self.telegram_reader:
            tasks.append(self.telegram_reader.start_monitoring())
        if self.sheets_reader:
            tasks.append(self.sheets_reader.start_monitoring())
        
        if not tasks:
            logger.error("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö!")
            logger.error("–í–∫–ª—é—á–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏—Å—Ç–æ—á–Ω–∏–∫ –≤ .env —Ñ–∞–π–ª–µ:")
            logger.error("  ENABLE_XTREME_CASE=true")
            logger.error("  –∏–ª–∏")
            logger.error("  ENABLE_CIFROVOY_RAY=true")
            return
        
        try:
            await asyncio.gather(*tasks)
        except KeyboardInterrupt:
            logger.info("\n‚ö†Ô∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        finally:
            await self.stop()
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞"""
        logger.info("\n" + "=" * 80)
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        logger.info("=" * 80)
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if self.stats["start_time"]:
            uptime = datetime.now() - self.stats["start_time"]
            hours = int(uptime.total_seconds() // 3600)
            minutes = int((uptime.total_seconds() % 3600) // 60)
            
            logger.info(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            logger.info(f"  –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {hours}—á {minutes}–º")
            logger.info(f"  –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑ Telegram: {self.stats['telegram_files_processed']}")
            logger.info(f"  –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑ Sheets: {self.stats['sheets_files_processed']}")
            logger.info(f"  –û—à–∏–±–æ–∫: {self.stats['errors']}")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        if self.telegram_reader:
            await self.telegram_reader.stop()
        
        if self.telegram_bot:
            # Telegram Bot –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —è–≤–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            pass
        
        logger.info("\n‚úì –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        logger.info("=" * 80)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        app_config = get_app_config()
        setup_logging(app_config)
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        bot = UnifiedPriceBot()
        asyncio.run(bot.start())
        
    except ValueError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
        return 1
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 0
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        return 1


if __name__ == "__main__":
    exit(main())

