"""
Telegram –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤
"""
import os
import asyncio
import logging
from pathlib import Path
from typing import Optional
from datetime import datetime

from telegram import Update, Document
from telegram.ext import (
    Application,
    MessageHandler,
    filters,
    ContextTypes,
    CommandHandler
)

from config import BotConfig, AppConfig
from processors import ProcessorFactory
from logger import setup_logging, get_logger

logger = get_logger(__name__)


class ChannelMonitorBot:
    """
    –ë–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–∞-–∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤.
    
    –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
    - –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –∫–∞–Ω–∞–ª-–∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö Excel —Ñ–∞–π–ª–æ–≤
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –ø—Ä–∞–π—Å–∞
    - –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –Ω–∞—Ü–µ–Ω–∫–æ–π
    - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª
    """
    
    def __init__(self, bot_config: BotConfig, app_config: AppConfig):
        """
        Args:
            bot_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
            app_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        """
        self.bot_config = bot_config
        self.app_config = app_config
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        Path(app_config.temp_dir).mkdir(parents=True, exist_ok=True)
        Path(app_config.output_dir).mkdir(parents=True, exist_ok=True)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "processed_files": 0,
            "errors": 0,
            "start_time": None
        }
        
        logger.info("ChannelMonitorBot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"–ö–∞–Ω–∞–ª-–∏—Å—Ç–æ—á–Ω–∏–∫: {bot_config.source_channel_id}")
        logger.info(f"–¶–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª: {bot_config.target_channel_id}")
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        if update.effective_chat.id != int(self.bot_config.source_channel_id):
            await update.message.reply_text(
                "‚ö†Ô∏è –≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ-–∏—Å—Ç–æ—á–Ω–∏–∫–µ."
            )
            return
        
        await update.message.reply_text(
            "‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç –∫–∞–Ω–∞–ª.\n"
            "üìä –û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª —Å –ø—Ä–∞–π—Å–æ–º –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏."
        )
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        uptime = "N/A"
        if self.stats["start_time"]:
            uptime_seconds = (datetime.now() - self.stats["start_time"]).total_seconds()
            hours = int(uptime_seconds // 3600)
            minutes = int((uptime_seconds % 3600) // 60)
            uptime = f"{hours}—á {minutes}–º"
        
        stats_text = (
            "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**\n\n"
            f"‚è± –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime}\n"
            f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {self.stats['processed_files']}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {self.stats['errors']}\n"
        )
        
        await update.message.reply_text(stats_text)
    
    async def handle_document(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (Excel —Ñ–∞–π–ª–æ–≤) –∏–∑ –∫–∞–Ω–∞–ª–∞-–∏—Å—Ç–æ—á–Ω–∏–∫–∞.
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞-–∏—Å—Ç–æ—á–Ω–∏–∫–∞
        chat_id = str(update.effective_chat.id)
        source_id = self.bot_config.source_channel_id.replace("@", "")
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ —á–∞—Ç–∞: {chat_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        document: Document = update.message.document
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ Excel —Ñ–∞–π–ª
        if not document.file_name.lower().endswith(('.xlsx', '.xls')):
            logger.info(f"–§–∞–π–ª {document.file_name} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Excel —Ñ–∞–π–ª–æ–º, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return
        
        try:
            logger.info(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {document.file_name}")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            file = await context.bot.get_file(document.file_id)
            temp_file_path = os.path.join(
                self.app_config.temp_dir,
                f"{datetime.now().strftime('%Y%m%d_%H%M%S')}_{document.file_name}"
            )
            await file.download_to_drive(temp_file_path)
            logger.info(f"–§–∞–π–ª —Å–∫–∞—á–∞–Ω: {temp_file_path}")
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
            processor = ProcessorFactory.auto_create_processor(temp_file_path)
            logger.info(f"–°–æ–∑–¥–∞–Ω –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä: {processor.__class__.__name__}")
            logger.info(f"–ù–∞—Ü–µ–Ω–∫–∞: {processor.markup_value}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
            processed_file = processor.process_file(temp_file_path)
            logger.info(f"–§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {processed_file}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª
            with open(processed_file, 'rb') as f:
                caption = (
                    f"‚úÖ –ü—Ä–∞–π—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω\n"
                    f"üìÑ –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: {document.file_name}\n"
                    f"üí∞ –ù–∞—Ü–µ–Ω–∫–∞: +{processor.markup_value} —Ä—É–±.\n"
                    f"üïê –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                )
                
                await context.bot.send_document(
                    chat_id=self.bot_config.target_channel_id,
                    document=f,
                    filename=os.path.basename(processed_file),
                    caption=caption
                )
            
            logger.info(f"‚úî –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª: {os.path.basename(processed_file)}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.stats["processed_files"] += 1
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            try:
                os.remove(temp_file_path)
                if os.path.exists(processed_file):
                    os.remove(processed_file)
                logger.debug("–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª-–∏—Å—Ç–æ—á–Ω–∏–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            if update.message:
                await update.message.reply_text(
                    f"‚úÖ –§–∞–π–ª '{document.file_name}' —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!"
                )
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {document.file_name}: {e}", exc_info=True)
            self.stats["errors"] += 1
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ—à–∏–±–∫–µ
            if update.message:
                await update.message.reply_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ '{document.file_name}':\n{str(e)}"
                )
    
    async def error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", exc_info=context.error)
        self.stats["errors"] += 1
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(self.bot_config.bot_token).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", self.start_command))
        application.add_handler(CommandHandler("stats", self.stats_command))
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        application.add_handler(
            MessageHandler(filters.Document.ALL, self.handle_document)
        )
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(self.error_handler)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.stats["start_time"] = datetime.now()
        
        logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞ –Ω–∞—á–∞—Ç...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling
        application.run_polling(allowed_updates=Update.ALL_TYPES)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        app_config = AppConfig.from_env()
        setup_logging(app_config)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        bot_config = BotConfig.from_env()
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        bot = ChannelMonitorBot(bot_config, app_config)
        bot.run()
        
    except ValueError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")
        return 1
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 0
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        return 1


if __name__ == "__main__":
    exit(main())

